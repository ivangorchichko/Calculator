{"version":3,"sources":["components/buttons/Button.js","App.js","components/input/Input.js","reportWebVitals.js","index.js"],"names":["chooseStyle","val","Button","props","className","value","onClick","handlerClick","App","handler","expr","String","state","input","search","setState","percentage","i","length","flag","test","slice","split","reverse","join","eval","lastOperation","percentageAnswer","finalExpr","replaceAll","ex","name","number","answer","lastChar","Array","from","this","Component","Input","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9fbecc59.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nconst chooseStyle = (val) => {\r\n    switch (val) {\r\n        case 'C':\r\n        case '+/-':\r\n        case '%': {\r\n            return 'width-normal text-with-opacity';\r\n        }\r\n        case '0': {\r\n            return 'width-extra';\r\n        }\r\n        case '=': {\r\n            return 'width-normal bg-zero'\r\n        }\r\n        default: {\r\n            return 'width-normal';\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst Button = (props) => {\r\n    return (\r\n        <div className={`btn ${chooseStyle(props.value)}`} onClick={() => props.handlerClick(props.value)}>\r\n            {props.value}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, { Component } from 'react';\r\nimport \"./App.css\";\r\nimport Button from './components/buttons/Button';\r\nimport Input from './components/input/Input';\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      input: \"0\",\r\n    };\r\n  }\r\n\r\n  handler = (value) => {\r\n\r\n    let expr = String(this.state.input);\r\n    if (expr.search(/[Error|NaN|Infinity]/g) !== -1) {\r\n      this.state.input = \"0\";\r\n    }\r\n\r\n    switch (value) {\r\n      case 'C': {\r\n        this.setState({ input: \"0\" });\r\n        break;\r\n      }\r\n      case '%': {\r\n        let expr = String(this.state.input);\r\n        let percentage = \"\";\r\n\r\n        for (let i = expr.length - 1; i >= 0; i--) {\r\n          let flag = /[-+÷×\\s]/.test(expr[i])\r\n          if (flag) {\r\n            break;\r\n          } else {\r\n            percentage += expr[i];\r\n            expr = expr.slice(0, -1);\r\n          }\r\n        }\r\n        percentage = percentage.split(\"\").reverse().join(\"\");\r\n        try {\r\n\r\n          if (expr === '') {\r\n            this.state.input = this.state.input + `/100`;\r\n            this.setState({ input: eval(this.state.input) });\r\n          } else {\r\n            let lastOperation = expr.slice(-1);\r\n            expr = expr.slice(0, -1);\r\n            let percentageAnswer;\r\n            switch (lastOperation) {\r\n              case '÷':\r\n              case '×': {\r\n                percentageAnswer = percentage / 100;\r\n                break;\r\n              }\r\n              case '+':\r\n              case '-': {\r\n                let finalExpr = `${expr.replaceAll(\"÷\", \"/\").replaceAll(\"×\", \"*\")}/100*${percentage}`;\r\n                percentageAnswer = String(eval(finalExpr));\r\n                break;\r\n              }\r\n              default: {\r\n                break;\r\n              }\r\n            }\r\n            this.setState({ input: expr + lastOperation + percentageAnswer });\r\n          }\r\n        } catch (ex) {\r\n          this.setState({ input: ex.name });\r\n        }\r\n        break;\r\n      }\r\n      case '.': {\r\n        let expr = this.state.input;\r\n        let number = \"\";\r\n        for (let i = expr.length - 1; i >= 0; i--) {\r\n          if (/[-+÷×\\s]/.test(expr[i])) {\r\n            break;\r\n          } else {\r\n            number += expr[i];\r\n            expr = expr.slice(0, -1);\r\n          }\r\n        }\r\n        if (/[.)]/.test(number) && /[.]/.test(value)) {\r\n          break;\r\n        } else {\r\n          if (/[-+÷×]/.test(this.state.input.slice(-1))) {\r\n            this.setState({ input: this.state.input + \"0\" + value });\r\n          } else {\r\n            this.setState({ input: this.state.input + value });\r\n          }\r\n        }\r\n        break;\r\n      }\r\n      case '+/-': {\r\n        if (/[-+÷×]/.test(this.state.input.slice(-1))) {\r\n          break;\r\n        } else {\r\n          this.setState({ input: this.state.input + `×(-1)` })\r\n        }\r\n        break;\r\n      }\r\n      case '0': {\r\n        if (this.state.input === \"0\") {\r\n          break;\r\n        }\r\n        if ((this.state.input.slice(-1) === \"0\" && /[-+÷×\\s]/.test(this.state.input[this.state.input.length - 2])) || this.state.input.slice(-1) === \")\") {\r\n          break;\r\n        } else {\r\n          this.setState({ input: this.state.input + value });\r\n        }\r\n        break;\r\n      }\r\n      case '=': {\r\n        try {\r\n          let answer = String(eval(this.state.input.replaceAll(\"÷\", \"/\").replaceAll(\"×\", \"*\")));\r\n          this.setState({ input: answer });\r\n        } catch (ex) {\r\n          this.setState({ input: ex.name });\r\n        }\r\n        break;\r\n      }\r\n\r\n\r\n      default: {\r\n        let lastChar = Array.from(this.state.input);\r\n        lastChar = lastChar.slice(-1);\r\n\r\n        if (/[0]/.test(lastChar) && !/[-+÷×]/.test(value)) {\r\n          this.setState({ input: this.state.input.slice(0, -1) + value });\r\n          break;\r\n        }\r\n        if ((/[-+÷×]/.test(lastChar) && /[-+÷×]/.test(value))) {\r\n          this.setState({ input: this.state.input.slice(0, -1) + value });\r\n        } else {\r\n          if (/[)]/.test(lastChar) && !/[-+÷×]/.test(value)) {\r\n            break;\r\n          }\r\n          this.setState({ input: this.state.input + value });\r\n        }\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <div className=\"calc\">\r\n          <div className=\"row\">\r\n            <Input input={this.state.input} />\r\n          </div>\r\n          <div className=\"bg-digits\">\r\n            <div className=\"row\">\r\n              <Button handlerClick={this.handler} value=\"C\" />\r\n              <Button handlerClick={this.handler} value=\"+/-\" />\r\n              <Button handlerClick={this.handler} value=\"%\" />\r\n              <Button handlerClick={this.handler} value=\"&divide;\" />\r\n            </div>\r\n            <div className=\"row\">\r\n              <Button handlerClick={this.handler} value=\"7\" />\r\n              <Button handlerClick={this.handler} value=\"8\" />\r\n              <Button handlerClick={this.handler} value=\"9\" />\r\n              <Button handlerClick={this.handler} value=\"&times;\" />\r\n            </div>\r\n            <div className=\"row\">\r\n              <Button handlerClick={this.handler} value=\"4\" />\r\n              <Button handlerClick={this.handler} value=\"5\" />\r\n              <Button handlerClick={this.handler} value=\"6\" />\r\n              <Button handlerClick={this.handler} value=\"-\" />\r\n            </div>\r\n            <div className=\"row\">\r\n              <Button handlerClick={this.handler} value=\"1\" />\r\n              <Button handlerClick={this.handler} value=\"2\" />\r\n              <Button handlerClick={this.handler} value=\"3\" />\r\n              <Button handlerClick={this.handler} value=\"+\" />\r\n            </div>\r\n            <div className=\"row\">\r\n              <Button handlerClick={this.handler} value=\"0\" />\r\n              <Button handlerClick={this.handler} value=\".\" />\r\n              <Button handlerClick={this.handler} value=\"=\" />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport './Input.css'\r\n\r\nconst Input = (props) => {\r\n    return (\r\n        <div className=\"input\">{props.input}</div>\r\n    );\r\n}\r\n\r\nexport default Input;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}